"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvokeSerenityBDD = void 0;
const assertions_1 = require("@serenity-js/assertions");
const core_1 = require("@serenity-js/core");
const interactions_1 = require("../interactions");
const TerminateFlow_1 = require("../interactions/TerminateFlow");
const questions_1 = require("../questions");
/**
 * @package
 */
class InvokeSerenityBDD extends core_1.Task {
    constructor(pathToArtifact, args = core_1.Question.about(`no arguments`, actor => []), props = core_1.Question.about(`no properties`, actor => [])) {
        super();
        this.pathToArtifact = pathToArtifact;
        this.args = args;
        this.props = props;
    }
    static at(pathToArtifact) {
        return new InvokeSerenityBDD(pathToArtifact);
    }
    withArguments(args) {
        return new InvokeSerenityBDD(this.pathToArtifact, args, this.props);
    }
    withProperties(properties) {
        return new InvokeSerenityBDD(this.pathToArtifact, this.args, properties);
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  perform this {@link @serenity-js/core/lib/screenplay~Task}.
     *
     * @param {PerformsActivities & UsesAbilities & AnswersQuestions} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~PerformsActivities}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     */
    performAs(actor) {
        return Promise.all([
            actor.answer(this.args),
            actor.answer(this.props),
        ]).
            then(([args, props]) => actor.attemptsTo(core_1.Check
            .whether(questions_1.FileExists.at(this.pathToArtifact), (0, assertions_1.equals)(false))
            .andIfSo(TerminateFlow_1.TerminateFlow.because(`I couldn't access the Serenity BDD CLI at ${this.pathToArtifact.value}. ` +
            `Did you remember to run \`serenity-bdd update\`?`)), 
        // todo: check if reports exist before invoking the jar?
        interactions_1.Spawn.the(new questions_1.JavaExecutable(), ...props, '-jar', this.pathToArtifact.value, ...args)));
    }
    /**
     * @desc
     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.
     *
     * @returns {string}
     */
    toString() {
        return `#actor invokes Serenity BDD`;
    }
}
exports.InvokeSerenityBDD = InvokeSerenityBDD;
//# sourceMappingURL=InvokeSerenityBDD.js.map