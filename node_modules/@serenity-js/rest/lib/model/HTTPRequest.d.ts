import { Answerable, AnswersQuestions, Question, UsesAbilities } from '@serenity-js/core';
import { AxiosRequestConfig } from 'axios';
/**
 * @desc
 *  HTTP Request sent by the {@link @serenity-js/core/lib/screenplay/actor~Actor}
 *  using the {@link Send} {@link @serenity-js/core/lib/screenplay~Interaction}
 *
 * @abstract
 * @extends {Question<Promise<AxiosRequestConfig>>}
 */
export declare abstract class HTTPRequest extends Question<Promise<AxiosRequestConfig>> {
    protected readonly resourceUri?: Answerable<string>;
    protected readonly data?: Answerable<any>;
    protected readonly config?: Answerable<AxiosRequestConfig>;
    /**
     * @protected
     *
     * @param {@serenity-js/core/lib/screenplay~Answerable<string>} [resourceUri]
     *  URL to which the request should be sent
     *
     * @param {@serenity-js/core/lib/screenplay~Answerable<any>} [data]
     *  Request body to be sent as part of the Put, Post or Patch request
     *
     * @param {@serenity-js/core/lib/screenplay~Answerable<AxiosRequestConfig>} [config]
     *  Axios request configuration, which can be used to override the defaults
     *  provided when the {@link CallAnApi} {@link @serenity-js/core/lib/screenplay~Ability} is instantiated
     */
    protected constructor(resourceUri?: Answerable<string>, data?: Answerable<any>, config?: Answerable<AxiosRequestConfig>);
    /**
     * @desc
     *  Resolves the {@link Question} in the context of a given {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<AxiosRequestConfig>}
     */
    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<AxiosRequestConfig>;
    /**
     * Determines the request method based on the name of the request class.
     * For example: GetRequest => GET, PostRequest => POST, etc.
     */
    private httpMethodName;
    /**
     * A human-readable description of the request, such as "a GET request", "an OPTIONS request", etc.
     */
    private requestDescription;
}
