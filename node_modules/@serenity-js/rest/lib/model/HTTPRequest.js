"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTTPRequest = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
/**
 * @desc
 *  HTTP Request sent by the {@link @serenity-js/core/lib/screenplay/actor~Actor}
 *  using the {@link Send} {@link @serenity-js/core/lib/screenplay~Interaction}
 *
 * @abstract
 * @extends {Question<Promise<AxiosRequestConfig>>}
 */
class HTTPRequest extends core_1.Question {
    /**
     * @protected
     *
     * @param {@serenity-js/core/lib/screenplay~Answerable<string>} [resourceUri]
     *  URL to which the request should be sent
     *
     * @param {@serenity-js/core/lib/screenplay~Answerable<any>} [data]
     *  Request body to be sent as part of the Put, Post or Patch request
     *
     * @param {@serenity-js/core/lib/screenplay~Answerable<AxiosRequestConfig>} [config]
     *  Axios request configuration, which can be used to override the defaults
     *  provided when the {@link CallAnApi} {@link @serenity-js/core/lib/screenplay~Ability} is instantiated
     */
    constructor(resourceUri, data, config) {
        super();
        this.resourceUri = resourceUri;
        this.data = data;
        this.config = config;
        this.subject = `${this.requestDescription()} to ${(0, io_1.formatted) `${this.resourceUri}`}`;
    }
    /**
     * @desc
     *  Resolves the {@link Question} in the context of a given {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<AxiosRequestConfig>}
     */
    answeredBy(actor) {
        return Promise.all([
            this.resourceUri ? actor.answer(this.resourceUri) : Promise.resolve(void 0),
            this.config ? actor.answer(this.config) : Promise.resolve({}),
            this.data ? actor.answer(this.data) : Promise.resolve(void 0),
        ]).
            then(([url, config, data]) => Object.assign({}, { url, data }, config, { method: this.httpMethodName() })).
            then(config => 
        // eslint-disable-next-line unicorn/prefer-object-from-entries
        Object.keys(config).reduce((acc, key) => {
            if (config[key]) {
                acc[key] = config[key];
            }
            return acc;
        }, {}));
    }
    /**
     * @desc
     *  Changes the description of this question's subject.
     *
     * @param {string} subject
     * @returns {Question<T>}
     */
    describedAs(subject) {
        this.subject = subject;
        return this;
    }
    toString() {
        return this.subject;
    }
    /**
     * Determines the request method based on the name of the request class.
     * For example: GetRequest => GET, PostRequest => POST, etc.
     */
    httpMethodName() {
        return this.constructor.name.replace(/Request/, '').toUpperCase();
    }
    /**
     * A human-readable description of the request, such as "a GET request", "an OPTIONS request", etc.
     */
    requestDescription() {
        const vowels = ['A', 'E', 'I', 'O', 'U'], method = this.httpMethodName();
        return `${~vowels.indexOf(method[0]) ? 'an' : 'a'} ${method} request`;
    }
}
exports.HTTPRequest = HTTPRequest;
//# sourceMappingURL=HTTPRequest.js.map