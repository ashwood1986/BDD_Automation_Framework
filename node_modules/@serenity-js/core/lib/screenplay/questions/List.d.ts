import { Actor, AnswersQuestions, UsesAbilities } from '../actor';
import { Answerable } from '../Answerable';
import { Question, QuestionAdapter } from '../Question';
import { Task } from '../Task';
import { Expectation } from './Expectation';
import { MetaQuestion } from './MetaQuestion';
export declare class List<Item_Type> extends Question<Promise<Item_Type[]>> {
    protected readonly collection: Answerable<Array<Item_Type>>;
    private subject;
    static of<IT>(collection: Answerable<Array<IT>>): List<IT>;
    constructor(collection: Answerable<Array<Item_Type>>);
    eachMappedTo<Mapped_Item_Type>(question: MetaQuestion<Item_Type, Promise<Mapped_Item_Type> | Mapped_Item_Type>): List<Mapped_Item_Type>;
    forEach(callback: (current: CurrentItem<Item_Type>, index: number, items: Array<Item_Type>) => Promise<void> | void): Task;
    where<Answer_Type>(question: MetaQuestion<Item_Type, Promise<Answer_Type> | Answer_Type>, expectation: Expectation<Answer_Type>): this;
    count(): QuestionAdapter<number>;
    first(): QuestionAdapter<Item_Type>;
    last(): QuestionAdapter<Item_Type>;
    get(index: number): QuestionAdapter<Item_Type>;
    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<Array<Item_Type>>;
    describedAs(subject: string): this;
    toString(): string;
}
export interface CurrentItem<Item_Type> {
    item: Item_Type;
    actor: Actor;
}
