"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Expectation = void 0;
const io_1 = require("../../io");
const __1 = require("../");
/**
 * @desc
 *  Defines an expectation to be used with [assertions](/modules/assertions)
 *  and {@link Question}s like {@link List}.
 *
 * @extends {Question}
 */
class Expectation {
    constructor(subject, predicate) {
        this.subject = subject;
        this.predicate = predicate;
    }
    /**
     * @desc
     *  Used to define a simple {@link Expectation}
     *
     * @example
     *  import { actorCalled, Expectation } from '@serenity-js/core';
     *  import { Ensure } from '@serenity-js/assertions';
     *
     *  function isDivisibleBy(expected: Answerable<number>): Expectation<number> {
     *      return Expectation.thatActualShould<number, number>('have value divisible by', expected)
     *          .soThat((actualValue, expectedValue) => actualValue % expectedValue === 0);
     *  }
     *
     *  actorCalled('Erica').attemptsTo(
     *      Ensure.that(4, isDivisibleBy(2)),
     *  );
     *
     * @param {string} relationshipName
     * @param {@serenity-js/core/lib/screenplay~Answerable<E>} expectedValue
     *
     * @returns {"soThat": function(predicate: Predicate<Expected, Actual>): Expectation<Expected, Actual>}
     */
    static thatActualShould(relationshipName, expectedValue) {
        return ({
            soThat: (simplifiedPredicate) => {
                const subject = relationshipName + ' ' + (0, io_1.d) `${expectedValue}`;
                return new Expectation(subject, async (actor, actualValue) => {
                    const expected = await actor.answer(expectedValue);
                    const actual = await actor.answer(actualValue);
                    const result = await simplifiedPredicate(actual, expected);
                    return result
                        ? new __1.ExpectationMet(subject, expected, actual)
                        : new __1.ExpectationNotMet(subject, expected, actual);
                });
            },
        });
    }
    /**
     * @desc
     *  Used to compose {@link Expectation}s.
     *
     * @example
     *  import { actorCalled, Expectation } from '@serenity-js/core';
     *  import { Ensure, and, or, isGreaterThan, isLessThan, equals  } from '@serenity-js/assertions';
     *
     *  function isWithin(lowerBound: number, upperBound: number) {
     *      return Expectation
     *          .to(`have value within ${ lowerBound } and ${ upperBound }`)
     *          .soThatActual(and(
     *              or(isGreaterThan(lowerBound), equals(lowerBound)),
     *              or(isLessThan(upperBound), equals(upperBound)),
     *          ));
     *  }
     *
     *  actorCalled('Erica').attemptsTo(
     *      Ensure.that(5, isWithin(3, 6)),
     *  );
     *
     * @param {string} relationshipName
     *
     * @returns {"soThat": function(...expectations: Array<Expectation<any, A>>): Expectation<any, A>}
     */
    static to(relationshipName) {
        return {
            soThatActual: (expectation) => {
                return new Expectation(relationshipName, async (actor, actualValue) => {
                    const outcome = await actor.answer(expectation.isMetFor(actualValue));
                    return outcome;
                });
            },
        };
    }
    isMetFor(actual) {
        return __1.Question.about(this.subject, actor => this.predicate(actor, actual));
    }
    describedAs(subject) {
        this.subject = subject;
        return this;
    }
    toString() {
        return this.subject;
    }
}
exports.Expectation = Expectation;
//# sourceMappingURL=Expectation.js.map