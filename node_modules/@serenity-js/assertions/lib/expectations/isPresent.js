"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPresent = void 0;
const core_1 = require("@serenity-js/core");
/**
 * @desc
 *  Expectation that the `actual` is not undefined or null.
 *  Also, for `actual` implementing {@link @serenity-js/core/lib/screenplay~Optional}, that `Optional.isPresent()` returns an {@link @serenity-js/core/lib/screenplay~Answerable}
 *  that resolves to `true`
 *
 * @returns {@serenity-js/core/lib/screenplay/questions~Expectation<Answerable<boolean>, Optional>}
 *
 * @see {@link @serenity-js/assertions~Ensure}
 * @see {@link @serenity-js/core/lib/screenplay/questions~Check}
 * @see {@link Wait}
 */
function isPresent() {
    return new IsPresent();
}
exports.isPresent = isPresent;
class IsPresent extends core_1.Expectation {
    static isOptional(value) {
        return value !== undefined
            && value !== null
            && typeof value.isPresent === 'function';
    }
    static valueToCheck(actual, actor) {
        if (IsPresent.isOptional(actual)) {
            return actual;
        }
        return actor.answer(actual);
    }
    static async isPresent(value, actor) {
        if (IsPresent.isOptional(value)) {
            return actor.answer(value.isPresent());
        }
        return value !== undefined
            && value !== null;
    }
    constructor() {
        super('become present', async (actor, actual) => {
            const value = await IsPresent.valueToCheck(actual, actor);
            const result = await IsPresent.isPresent(value, actor);
            return result
                ? new core_1.ExpectationMet('become present', undefined, undefined)
                : new core_1.ExpectationNotMet('become present', undefined, undefined);
        });
    }
}
//# sourceMappingURL=isPresent.js.map